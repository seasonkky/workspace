package com.nexgo.xtms.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nexgo.xtms.data.entity.DownloadTaskModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_TASK_MODEL".
*/
public class DownloadTaskModelDao extends AbstractDao<DownloadTaskModel, Void> {

    public static final String TABLENAME = "DOWNLOAD_TASK_MODEL";

    /**
     * Properties of entity DownloadTaskModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Progress = new Property(5, int.class, "progress", false, "PROGRESS");
        public final static Property DownloadSize = new Property(6, long.class, "downloadSize", false, "DOWNLOAD_SIZE");
        public final static Property TotalSize = new Property(7, long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property SavePath = new Property(8, String.class, "savePath", false, "SAVE_PATH");
        public final static Property Md5 = new Property(9, String.class, "md5", false, "MD5");
        public final static Property Version = new Property(10, String.class, "version", false, "VERSION");
        public final static Property Desc = new Property(11, String.class, "desc", false, "DESC");
        public final static Property Taskid = new Property(12, String.class, "taskid", false, "TASKID");
        public final static Property Active = new Property(13, boolean.class, "active", false, "ACTIVE");
        public final static Property Fileowner = new Property(14, String.class, "fileowner", false, "FILEOWNER");
        public final static Property Filesize = new Property(15, String.class, "filesize", false, "FILESIZE");
        public final static Property Filelogictype = new Property(16, String.class, "filelogictype", false, "FILELOGICTYPE");
        public final static Property Filetype = new Property(17, String.class, "filetype", false, "FILETYPE");
        public final static Property Versioncode = new Property(18, String.class, "versioncode", false, "VERSIONCODE");
        public final static Property Fileresource = new Property(19, String.class, "fileresource", false, "FILERESOURCE");
        public final static Property Ifcover = new Property(20, String.class, "ifcover", false, "IFCOVER");
        public final static Property Bak1 = new Property(21, String.class, "bak1", false, "BAK1");
        public final static Property Bak2 = new Property(22, String.class, "bak2", false, "BAK2");
        public final static Property OtherParam = new Property(23, String.class, "otherParam", false, "OTHER_PARAM");
        public final static Property Updatestatus = new Property(24, String.class, "updatestatus", false, "UPDATESTATUS");
        public final static Property DownloadPerSize = new Property(25, String.class, "downloadPerSize", false, "DOWNLOAD_PER_SIZE");
    }


    public DownloadTaskModelDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadTaskModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_TASK_MODEL\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"ID\" INTEGER NOT NULL ," + // 2: id
                "\"IMAGE\" TEXT," + // 3: image
                "\"URL\" TEXT," + // 4: url
                "\"PROGRESS\" INTEGER NOT NULL ," + // 5: progress
                "\"DOWNLOAD_SIZE\" INTEGER NOT NULL ," + // 6: downloadSize
                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 7: totalSize
                "\"SAVE_PATH\" TEXT," + // 8: savePath
                "\"MD5\" TEXT," + // 9: md5
                "\"VERSION\" TEXT," + // 10: version
                "\"DESC\" TEXT," + // 11: desc
                "\"TASKID\" TEXT," + // 12: taskid
                "\"ACTIVE\" INTEGER NOT NULL ," + // 13: active
                "\"FILEOWNER\" TEXT," + // 14: fileowner
                "\"FILESIZE\" TEXT," + // 15: filesize
                "\"FILELOGICTYPE\" TEXT," + // 16: filelogictype
                "\"FILETYPE\" TEXT," + // 17: filetype
                "\"VERSIONCODE\" TEXT," + // 18: versioncode
                "\"FILERESOURCE\" TEXT," + // 19: fileresource
                "\"IFCOVER\" TEXT," + // 20: ifcover
                "\"BAK1\" TEXT," + // 21: bak1
                "\"BAK2\" TEXT," + // 22: bak2
                "\"OTHER_PARAM\" TEXT," + // 23: otherParam
                "\"UPDATESTATUS\" TEXT," + // 24: updatestatus
                "\"DOWNLOAD_PER_SIZE\" TEXT);"); // 25: downloadPerSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_TASK_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadTaskModel entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getProgress());
        stmt.bindLong(7, entity.getDownloadSize());
        stmt.bindLong(8, entity.getTotalSize());
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(9, savePath);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(10, md5);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(11, version);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(12, desc);
        }
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(13, taskid);
        }
        stmt.bindLong(14, entity.getActive() ? 1L: 0L);
 
        String fileowner = entity.getFileowner();
        if (fileowner != null) {
            stmt.bindString(15, fileowner);
        }
 
        String filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindString(16, filesize);
        }
 
        String filelogictype = entity.getFilelogictype();
        if (filelogictype != null) {
            stmt.bindString(17, filelogictype);
        }
 
        String filetype = entity.getFiletype();
        if (filetype != null) {
            stmt.bindString(18, filetype);
        }
 
        String versioncode = entity.getVersioncode();
        if (versioncode != null) {
            stmt.bindString(19, versioncode);
        }
 
        String fileresource = entity.getFileresource();
        if (fileresource != null) {
            stmt.bindString(20, fileresource);
        }
 
        String ifcover = entity.getIfcover();
        if (ifcover != null) {
            stmt.bindString(21, ifcover);
        }
 
        String bak1 = entity.getBak1();
        if (bak1 != null) {
            stmt.bindString(22, bak1);
        }
 
        String bak2 = entity.getBak2();
        if (bak2 != null) {
            stmt.bindString(23, bak2);
        }
 
        String otherParam = entity.getOtherParam();
        if (otherParam != null) {
            stmt.bindString(24, otherParam);
        }
 
        String updatestatus = entity.getUpdatestatus();
        if (updatestatus != null) {
            stmt.bindString(25, updatestatus);
        }
 
        String downloadPerSize = entity.getDownloadPerSize();
        if (downloadPerSize != null) {
            stmt.bindString(26, downloadPerSize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadTaskModel entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getProgress());
        stmt.bindLong(7, entity.getDownloadSize());
        stmt.bindLong(8, entity.getTotalSize());
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(9, savePath);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(10, md5);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(11, version);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(12, desc);
        }
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(13, taskid);
        }
        stmt.bindLong(14, entity.getActive() ? 1L: 0L);
 
        String fileowner = entity.getFileowner();
        if (fileowner != null) {
            stmt.bindString(15, fileowner);
        }
 
        String filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindString(16, filesize);
        }
 
        String filelogictype = entity.getFilelogictype();
        if (filelogictype != null) {
            stmt.bindString(17, filelogictype);
        }
 
        String filetype = entity.getFiletype();
        if (filetype != null) {
            stmt.bindString(18, filetype);
        }
 
        String versioncode = entity.getVersioncode();
        if (versioncode != null) {
            stmt.bindString(19, versioncode);
        }
 
        String fileresource = entity.getFileresource();
        if (fileresource != null) {
            stmt.bindString(20, fileresource);
        }
 
        String ifcover = entity.getIfcover();
        if (ifcover != null) {
            stmt.bindString(21, ifcover);
        }
 
        String bak1 = entity.getBak1();
        if (bak1 != null) {
            stmt.bindString(22, bak1);
        }
 
        String bak2 = entity.getBak2();
        if (bak2 != null) {
            stmt.bindString(23, bak2);
        }
 
        String otherParam = entity.getOtherParam();
        if (otherParam != null) {
            stmt.bindString(24, otherParam);
        }
 
        String updatestatus = entity.getUpdatestatus();
        if (updatestatus != null) {
            stmt.bindString(25, updatestatus);
        }
 
        String downloadPerSize = entity.getDownloadPerSize();
        if (downloadPerSize != null) {
            stmt.bindString(26, downloadPerSize);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DownloadTaskModel readEntity(Cursor cursor, int offset) {
        DownloadTaskModel entity = new DownloadTaskModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.getInt(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.getInt(offset + 5), // progress
            cursor.getLong(offset + 6), // downloadSize
            cursor.getLong(offset + 7), // totalSize
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // savePath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // md5
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // version
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // desc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // taskid
            cursor.getShort(offset + 13) != 0, // active
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fileowner
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // filesize
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // filelogictype
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // filetype
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // versioncode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // fileresource
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ifcover
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // bak1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // bak2
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // otherParam
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // updatestatus
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // downloadPerSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadTaskModel entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProgress(cursor.getInt(offset + 5));
        entity.setDownloadSize(cursor.getLong(offset + 6));
        entity.setTotalSize(cursor.getLong(offset + 7));
        entity.setSavePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMd5(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTaskid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setActive(cursor.getShort(offset + 13) != 0);
        entity.setFileowner(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFilesize(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFilelogictype(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFiletype(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVersioncode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFileresource(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIfcover(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBak1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBak2(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOtherParam(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUpdatestatus(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDownloadPerSize(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DownloadTaskModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DownloadTaskModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(DownloadTaskModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
