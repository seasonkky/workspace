package com.nexgo.xtms.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nexgo.xtms.data.entity.TaskModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_MODEL".
*/
public class TaskModelDao extends AbstractDao<TaskModel, Void> {

    public static final String TABLENAME = "TASK_MODEL";

    /**
     * Properties of entity TaskModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Taskid = new Property(0, String.class, "taskid", false, "TASKID");
        public final static Property Active = new Property(1, boolean.class, "active", false, "ACTIVE");
        public final static Property Finish = new Property(2, boolean.class, "finish", false, "FINISH");
        public final static Property Urls = new Property(3, String.class, "urls", false, "URLS");
    }


    public TaskModelDao(DaoConfig config) {
        super(config);
    }
    
    public TaskModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_MODEL\" (" + //
                "\"TASKID\" TEXT," + // 0: taskid
                "\"ACTIVE\" INTEGER NOT NULL ," + // 1: active
                "\"FINISH\" INTEGER NOT NULL ," + // 2: finish
                "\"URLS\" TEXT);"); // 3: urls
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskModel entity) {
        stmt.clearBindings();
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(1, taskid);
        }
        stmt.bindLong(2, entity.getActive() ? 1L: 0L);
        stmt.bindLong(3, entity.getFinish() ? 1L: 0L);
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(4, urls);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskModel entity) {
        stmt.clearBindings();
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(1, taskid);
        }
        stmt.bindLong(2, entity.getActive() ? 1L: 0L);
        stmt.bindLong(3, entity.getFinish() ? 1L: 0L);
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(4, urls);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TaskModel readEntity(Cursor cursor, int offset) {
        TaskModel entity = new TaskModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskid
            cursor.getShort(offset + 1) != 0, // active
            cursor.getShort(offset + 2) != 0, // finish
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // urls
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskModel entity, int offset) {
        entity.setTaskid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setActive(cursor.getShort(offset + 1) != 0);
        entity.setFinish(cursor.getShort(offset + 2) != 0);
        entity.setUrls(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TaskModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TaskModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(TaskModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
