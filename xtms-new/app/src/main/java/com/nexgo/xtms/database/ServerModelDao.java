package com.nexgo.xtms.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nexgo.xtms.data.entity.ServerModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVER_MODEL".
*/
public class ServerModelDao extends AbstractDao<ServerModel, Long> {

    public static final String TABLENAME = "SERVER_MODEL";

    /**
     * Properties of entity ServerModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyName = new Property(1, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property Countryname = new Property(2, String.class, "countryname", false, "COUNTRYNAME");
        public final static Property CountryCode = new Property(3, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property Domain = new Property(4, String.class, "domain", false, "DOMAIN");
        public final static Property Ip = new Property(5, String.class, "ip", false, "IP");
        public final static Property IsShowIp = new Property(6, boolean.class, "isShowIp", false, "IS_SHOW_IP");
    }


    public ServerModelDao(DaoConfig config) {
        super(config);
    }
    
    public ServerModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COMPANY_NAME\" TEXT," + // 1: companyName
                "\"COUNTRYNAME\" TEXT," + // 2: countryname
                "\"COUNTRY_CODE\" TEXT," + // 3: countryCode
                "\"DOMAIN\" TEXT," + // 4: domain
                "\"IP\" TEXT," + // 5: ip
                "\"IS_SHOW_IP\" INTEGER NOT NULL );"); // 6: isShowIp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServerModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(2, companyName);
        }
 
        String countryname = entity.getCountryname();
        if (countryname != null) {
            stmt.bindString(3, countryname);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(4, countryCode);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(5, domain);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(6, ip);
        }
        stmt.bindLong(7, entity.getIsShowIp() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServerModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(2, companyName);
        }
 
        String countryname = entity.getCountryname();
        if (countryname != null) {
            stmt.bindString(3, countryname);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(4, countryCode);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(5, domain);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(6, ip);
        }
        stmt.bindLong(7, entity.getIsShowIp() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ServerModel readEntity(Cursor cursor, int offset) {
        ServerModel entity = new ServerModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // companyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countryname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // countryCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // domain
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ip
            cursor.getShort(offset + 6) != 0 // isShowIp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ServerModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountryCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDomain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsShowIp(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ServerModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ServerModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ServerModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
