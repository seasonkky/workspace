package com.nexgo.xtms.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nexgo.xtms.data.entity.LogModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG_MODEL".
*/
public class LogModelDao extends AbstractDao<LogModel, Void> {

    public static final String TABLENAME = "LOG_MODEL";

    /**
     * Properties of entity LogModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, long.class, "time", false, "TIME");
        public final static Property LogContent = new Property(1, String.class, "logContent", false, "LOG_CONTENT");
        public final static Property IsShow = new Property(2, boolean.class, "isShow", false, "IS_SHOW");
    }


    public LogModelDao(DaoConfig config) {
        super(config);
    }
    
    public LogModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_MODEL\" (" + //
                "\"TIME\" INTEGER NOT NULL UNIQUE ," + // 0: time
                "\"LOG_CONTENT\" TEXT," + // 1: logContent
                "\"IS_SHOW\" INTEGER NOT NULL );"); // 2: isShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String logContent = entity.getLogContent();
        if (logContent != null) {
            stmt.bindString(2, logContent);
        }
        stmt.bindLong(3, entity.getIsShow() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String logContent = entity.getLogContent();
        if (logContent != null) {
            stmt.bindString(2, logContent);
        }
        stmt.bindLong(3, entity.getIsShow() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LogModel readEntity(Cursor cursor, int offset) {
        LogModel entity = new LogModel( //
            cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logContent
            cursor.getShort(offset + 2) != 0 // isShow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogModel entity, int offset) {
        entity.setTime(cursor.getLong(offset + 0));
        entity.setLogContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsShow(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LogModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LogModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(LogModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
