package com.nexgo.xtms.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nexgo.xtms.data.entity.CountryModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTRY_MODEL".
*/
public class CountryModelDao extends AbstractDao<CountryModel, Long> {

    public static final String TABLENAME = "COUNTRY_MODEL";

    /**
     * Properties of entity CountryModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CountryCode = new Property(1, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property CountryId = new Property(2, String.class, "countryId", false, "COUNTRY_ID");
        public final static Property En_name = new Property(3, String.class, "en_name", false, "EN_NAME");
        public final static Property Cn_name = new Property(4, String.class, "cn_name", false, "CN_NAME");
    }


    public CountryModelDao(DaoConfig config) {
        super(config);
    }
    
    public CountryModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRY_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COUNTRY_CODE\" TEXT UNIQUE ," + // 1: countryCode
                "\"COUNTRY_ID\" TEXT," + // 2: countryId
                "\"EN_NAME\" TEXT," + // 3: en_name
                "\"CN_NAME\" TEXT);"); // 4: cn_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRY_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountryModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(2, countryCode);
        }
 
        String countryId = entity.getCountryId();
        if (countryId != null) {
            stmt.bindString(3, countryId);
        }
 
        String en_name = entity.getEn_name();
        if (en_name != null) {
            stmt.bindString(4, en_name);
        }
 
        String cn_name = entity.getCn_name();
        if (cn_name != null) {
            stmt.bindString(5, cn_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountryModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(2, countryCode);
        }
 
        String countryId = entity.getCountryId();
        if (countryId != null) {
            stmt.bindString(3, countryId);
        }
 
        String en_name = entity.getEn_name();
        if (en_name != null) {
            stmt.bindString(4, en_name);
        }
 
        String cn_name = entity.getCn_name();
        if (cn_name != null) {
            stmt.bindString(5, cn_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CountryModel readEntity(Cursor cursor, int offset) {
        CountryModel entity = new CountryModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // countryCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // en_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cn_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountryModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountryCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEn_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCn_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountryModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountryModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountryModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
